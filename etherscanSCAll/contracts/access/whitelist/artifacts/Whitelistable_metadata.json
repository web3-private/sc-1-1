{
	"compiler": {
		"version": "0.8.25+commit.b61c2a91"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "OwnableInvalidOwner",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "OwnableUnauthorizedAccount",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_account",
						"type": "address"
					}
				],
				"name": "UnWhitelisted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_account",
						"type": "address"
					}
				],
				"name": "Whitelisted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "newWhitelister",
						"type": "address"
					}
				],
				"name": "WhitelisterChanged",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_account",
						"type": "address"
					}
				],
				"name": "isWhitelisted",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "setOwner",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_account",
						"type": "address"
					}
				],
				"name": "unWhitelist",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_newWhitelister",
						"type": "address"
					}
				],
				"name": "updateWhitelister",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_account",
						"type": "address"
					}
				],
				"name": "whitelist",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "whitelister",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "Allows accounts to be whitelisted by a \"whitelister\" role",
			"errors": {
				"OwnableInvalidOwner(address)": [
					{
						"details": "The owner is not a valid owner account. (eg. `address(0)`)"
					}
				],
				"OwnableUnauthorizedAccount(address)": [
					{
						"details": "The caller account is not authorized to perform an operation."
					}
				]
			},
			"kind": "dev",
			"methods": {
				"isWhitelisted(address)": {
					"params": {
						"_account": "The address to check."
					},
					"returns": {
						"_0": "True if the account is whitelisted, false if the account is not whitelisted."
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
				},
				"setOwner(address)": {
					"details": "Sets a new owner address"
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				},
				"unWhitelist(address)": {
					"params": {
						"_account": "The address to remove from the whitelist."
					}
				},
				"updateWhitelister(address)": {
					"params": {
						"_newWhitelister": "The address of the new whitelister."
					}
				},
				"whitelist(address)": {
					"params": {
						"_account": "The address to whitelist."
					}
				}
			},
			"title": "Whitelistable Token",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"isWhitelisted(address)": {
					"notice": "Checks if account is whitelisted."
				},
				"unWhitelist(address)": {
					"notice": "Removes account from whitelist."
				},
				"updateWhitelister(address)": {
					"notice": "Updates the whitelister address."
				},
				"whitelist(address)": {
					"notice": "Adds account to whitelist."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"access/whitelist/Whitelistable.sol": "Whitelistable"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb",
			"license": "MIT",
			"urls": [
				"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6",
				"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
			"license": "MIT",
			"urls": [
				"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
				"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
			]
		},
		"access/JDSCOwnable.sol": {
			"keccak256": "0x8ffa24471f24e6316346ab495bcba6dac3f02b4b9e12456d4076c2f2371ac8ab",
			"license": "MIT",
			"urls": [
				"bzz-raw://3bb59d868190cc6774fc5c0ecae2495acac0c94792bbdc117dc8b07cffe1ac57",
				"dweb:/ipfs/QmbF3tzpfmgykBPinsNL6wdAiCTQykeAVmzBBiKJ4Jw195"
			]
		},
		"access/whitelist/Whitelistable.sol": {
			"keccak256": "0x40877cb7815dee94df468d61d72503da1fd684880fd6e666b95ac496eb86f034",
			"license": "MIT",
			"urls": [
				"bzz-raw://0eb6757ef3b654771a1f985ea67c363af4c8abc8615fe805e1b678a9575685c3",
				"dweb:/ipfs/QmQwjwFu43rRmoASMwxM7BArxTuDXSwFBaz1tctHZRRSaQ"
			]
		}
	},
	"version": 1
}