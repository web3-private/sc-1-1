{
	"id": "88e4a0f610f9287841200d6cfe2fe006",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.25",
	"solcLongVersion": "0.8.25+commit.b61c2a91",
	"input": {
		"language": "Solidity",
		"sources": {
			"util/ECRecover.sol": {
				"content": "/**\n * SPDX-License-Identifier: Apache-2.0\n *\n * Copyright (c) 2023, Circle Internet Financial, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npragma solidity ^0.8.0;\n\n/**\n * @title ECRecover\n * @notice A library that provides a safe ECDSA recovery function\n */\nlibrary ECRecover {\n    /**\n     * @notice Recover signer's address from a signed message\n     * @dev Adapted from: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/65e4ffde586ec89af3b7e9140bdc9235d1254853/contracts/cryptography/ECDSA.sol\n     * Modifications: Accept v, r, and s as separate arguments\n     * @param digest    Keccak-256 hash digest of the signed message\n     * @param v         v of the signature\n     * @param r         r of the signature\n     * @param s         s of the signature\n     * @return Signer address\n     */\n    function recover(\n        bytes32 digest,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (\n            uint256(s) >\n            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0\n        ) {\n            revert(\"ECRecover: invalid signature 's' value\");\n        }\n\n        if (v != 27 && v != 28) {\n            revert(\"ECRecover: invalid signature 'v' value\");\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(digest, v, r, s);\n        require(signer != address(0), \"ECRecover: invalid signature\");\n\n        return signer;\n    }\n\n    /**\n     * @notice Recover signer's address from a signed message\n     * @dev Adapted from: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/0053ee040a7ff1dbc39691c9e67a69f564930a88/contracts/utils/cryptography/ECDSA.sol\n     * @param digest    Keccak-256 hash digest of the signed message\n     * @param signature Signature byte array associated with hash\n     * @return Signer address\n     */\n    function recover(bytes32 digest, bytes memory signature)\n        internal\n        pure\n        returns (address)\n    {\n        require(signature.length == 65, \"ECRecover: invalid signature length\");\n\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        // ecrecover takes the signature parameters, and the only way to get them\n        // currently is to use assembly.\n        /// @solidity memory-safe-assembly\n        assembly {\n            r := mload(add(signature, 0x20))\n            s := mload(add(signature, 0x40))\n            v := byte(0, mload(add(signature, 0x60)))\n        }\n        return recover(digest, v, r, s);\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 2000000
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"util/ECRecover.sol": {
				"ECRecover": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"title": "ECRecover",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"util/ECRecover.sol\":779:3946  library ECRecover {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"util/ECRecover.sol\":779:3946  library ECRecover {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212208cc9789925161b327832775dc62be77570ab99397ee96d0a051afcbe496a159a64736f6c63430008190033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212208cc9789925161b327832775dc62be77570ab99397ee96d0a051afcbe496a159a64736f6c63430008190033",
							"opcodes": "PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP13 0xC9 PUSH25 0x9925161B327832775DC62BE77570AB99397EE96D0A051AFCBE BLOBHASH PUSH11 0x159A64736F6C6343000819 STOP CALLER ",
							"sourceMap": "779:3167:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;779:3167:0;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212208cc9789925161b327832775dc62be77570ab99397ee96d0a051afcbe496a159a64736f6c63430008190033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP13 0xC9 PUSH25 0x9925161B327832775DC62BE77570AB99397EE96D0A051AFCBE BLOBHASH PUSH11 0x159A64736F6C6343000819 STOP CALLER ",
							"sourceMap": "779:3167:0:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "96",
								"totalCost": "17096"
							},
							"internal": {
								"recover(bytes32,bytes memory)": "infinite",
								"recover(bytes32,uint8,bytes32,bytes32)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 779,
									"end": 3946,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 779,
									"end": 3946,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 779,
									"end": 3946,
									"name": "PUSH",
									"source": 0,
									"value": "B"
								},
								{
									"begin": 779,
									"end": 3946,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 779,
									"end": 3946,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 779,
									"end": 3946,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 779,
									"end": 3946,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 779,
									"end": 3946,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 779,
									"end": 3946,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 779,
									"end": 3946,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 779,
									"end": 3946,
									"name": "BYTE",
									"source": 0
								},
								{
									"begin": 779,
									"end": 3946,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 779,
									"end": 3946,
									"name": "EQ",
									"source": 0
								},
								{
									"begin": 779,
									"end": 3946,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 779,
									"end": 3946,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 779,
									"end": 3946,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 779,
									"end": 3946,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 779,
									"end": 3946,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 779,
									"end": 3946,
									"name": "PUSH",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 779,
									"end": 3946,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 779,
									"end": 3946,
									"name": "PUSH",
									"source": 0,
									"value": "24"
								},
								{
									"begin": 779,
									"end": 3946,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 779,
									"end": 3946,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 779,
									"end": 3946,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 779,
									"end": 3946,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 779,
									"end": 3946,
									"name": "ADDRESS",
									"source": 0
								},
								{
									"begin": 779,
									"end": 3946,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 779,
									"end": 3946,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 779,
									"end": 3946,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 779,
									"end": 3946,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 779,
									"end": 3946,
									"name": "MSTORE8",
									"source": 0
								},
								{
									"begin": 779,
									"end": 3946,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 779,
									"end": 3946,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 779,
									"end": 3946,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212208cc9789925161b327832775dc62be77570ab99397ee96d0a051afcbe496a159a64736f6c63430008190033",
									".code": [
										{
											"begin": 779,
											"end": 3946,
											"name": "PUSHDEPLOYADDRESS",
											"source": 0
										},
										{
											"begin": 779,
											"end": 3946,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 779,
											"end": 3946,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 779,
											"end": 3946,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 779,
											"end": 3946,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 779,
											"end": 3946,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 779,
											"end": 3946,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 779,
											"end": 3946,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 779,
											"end": 3946,
											"name": "REVERT",
											"source": 0
										}
									]
								}
							},
							"sourceList": [
								"util/ECRecover.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"ECRecover\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"A library that provides a safe ECDSA recovery function\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"util/ECRecover.sol\":\"ECRecover\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":2000000},\"remappings\":[]},\"sources\":{\"util/ECRecover.sol\":{\"keccak256\":\"0xbcd81d1af5c532590186ca3478c0a905ccf03e9f97e84e7397965a65bf45c8ce\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://d3a1ddcb5929bf03ea8047a4fc3d51d362dcd16e23e981b73ac5f49629e06c03\",\"dweb:/ipfs/QmdcaakJ2MCwZ5reNEVe2gaUjVbJNQFPzaFrH2sCZtaatt\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "A library that provides a safe ECDSA recovery function",
						"version": 1
					}
				}
			}
		},
		"sources": {
			"util/ECRecover.sol": {
				"ast": {
					"absolutePath": "util/ECRecover.sol",
					"exportedSymbols": {
						"ECRecover": [
							100
						]
					},
					"id": 101,
					"license": "Apache-2.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "660:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ECRecover",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "685:93:0",
								"text": " @title ECRecover\n @notice A library that provides a safe ECDSA recovery function"
							},
							"fullyImplemented": true,
							"id": 100,
							"linearizedBaseContracts": [
								100
							],
							"name": "ECRecover",
							"nameLocation": "787:9:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 62,
										"nodeType": "Block",
										"src": "1466:1422:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 21,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 18,
																"name": "s",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 11,
																"src": "2375:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 17,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "2367:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 16,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "2367:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 19,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2367:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "307837464646464646464646464646464646464646464646464646464646464646463544353736453733353741343530314444464539324634363638314232304130",
														"id": 20,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2392:66:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1",
															"typeString": "int_const 5789...(69 digits omitted)...7168"
														},
														"value": "0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"
													},
													"src": "2367:91:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 27,
												"nodeType": "IfStatement",
												"src": "2350:192:0",
												"trueBody": {
													"id": 26,
													"nodeType": "Block",
													"src": "2469:73:0",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"hexValue": "45435265636f7665723a20696e76616c6964207369676e6174757265202773272076616c7565",
																		"id": 23,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2490:40:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_d206273b3c553a1b13b9d8796a7fcba032bdfd568947d83b931c503b94162e6b",
																			"typeString": "literal_string \"ECRecover: invalid signature 's' value\""
																		},
																		"value": "ECRecover: invalid signature 's' value"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_stringliteral_d206273b3c553a1b13b9d8796a7fcba032bdfd568947d83b931c503b94162e6b",
																			"typeString": "literal_string \"ECRecover: invalid signature 's' value\""
																		}
																	],
																	"id": 22,
																	"name": "revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967277,
																		4294967277
																	],
																	"referencedDeclaration": 4294967277,
																	"src": "2483:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (string memory) pure"
																	}
																},
																"id": 24,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2483:48:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 25,
															"nodeType": "ExpressionStatement",
															"src": "2483:48:0"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 34,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														},
														"id": 30,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 28,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 7,
															"src": "2556:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"hexValue": "3237",
															"id": 29,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2561:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_27_by_1",
																"typeString": "int_const 27"
															},
															"value": "27"
														},
														"src": "2556:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														},
														"id": 33,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 31,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 7,
															"src": "2567:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"hexValue": "3238",
															"id": 32,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2572:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_28_by_1",
																"typeString": "int_const 28"
															},
															"value": "28"
														},
														"src": "2567:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "2556:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 40,
												"nodeType": "IfStatement",
												"src": "2552:97:0",
												"trueBody": {
													"id": 39,
													"nodeType": "Block",
													"src": "2576:73:0",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"hexValue": "45435265636f7665723a20696e76616c6964207369676e6174757265202776272076616c7565",
																		"id": 36,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2597:40:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_1cf579d054480afcbb1cbfabb6c7b74fb6727e6f1a4aa3db609dfd96bedcf5e6",
																			"typeString": "literal_string \"ECRecover: invalid signature 'v' value\""
																		},
																		"value": "ECRecover: invalid signature 'v' value"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_stringliteral_1cf579d054480afcbb1cbfabb6c7b74fb6727e6f1a4aa3db609dfd96bedcf5e6",
																			"typeString": "literal_string \"ECRecover: invalid signature 'v' value\""
																		}
																	],
																	"id": 35,
																	"name": "revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967277,
																		4294967277
																	],
																	"referencedDeclaration": 4294967277,
																	"src": "2590:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (string memory) pure"
																	}
																},
																"id": 37,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2590:48:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 38,
															"nodeType": "ExpressionStatement",
															"src": "2590:48:0"
														}
													]
												}
											},
											{
												"assignments": [
													42
												],
												"declarations": [
													{
														"constant": false,
														"id": 42,
														"mutability": "mutable",
														"name": "signer",
														"nameLocation": "2751:6:0",
														"nodeType": "VariableDeclaration",
														"scope": 62,
														"src": "2743:14:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 41,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2743:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 49,
												"initialValue": {
													"arguments": [
														{
															"id": 44,
															"name": "digest",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 5,
															"src": "2770:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 45,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 7,
															"src": "2778:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 46,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 9,
															"src": "2781:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 47,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 11,
															"src": "2784:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 43,
														"name": "ecrecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967290,
														"src": "2760:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address)"
														}
													},
													"id": 48,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2760:26:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2743:43:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 56,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 51,
																"name": "signer",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 42,
																"src": "2804:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 54,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2822:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 53,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2814:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 52,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2814:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 55,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2814:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2804:20:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45435265636f7665723a20696e76616c6964207369676e6174757265",
															"id": 57,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2826:30:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_7959ebd2fab116843809b30e9abb1c773aaf1e329b5b240178a5656434221413",
																"typeString": "literal_string \"ECRecover: invalid signature\""
															},
															"value": "ECRecover: invalid signature"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_7959ebd2fab116843809b30e9abb1c773aaf1e329b5b240178a5656434221413",
																"typeString": "literal_string \"ECRecover: invalid signature\""
															}
														],
														"id": 50,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2796:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 58,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2796:61:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 59,
												"nodeType": "ExpressionStatement",
												"src": "2796:61:0"
											},
											{
												"expression": {
													"id": 60,
													"name": "signer",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 42,
													"src": "2875:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 15,
												"id": 61,
												"nodeType": "Return",
												"src": "2868:13:0"
											}
										]
									},
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "803:524:0",
										"text": " @notice Recover signer's address from a signed message\n @dev Adapted from: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/65e4ffde586ec89af3b7e9140bdc9235d1254853/contracts/cryptography/ECDSA.sol\n Modifications: Accept v, r, and s as separate arguments\n @param digest    Keccak-256 hash digest of the signed message\n @param v         v of the signature\n @param r         r of the signature\n @param s         s of the signature\n @return Signer address"
									},
									"id": 63,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nameLocation": "1341:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5,
												"mutability": "mutable",
												"name": "digest",
												"nameLocation": "1366:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 63,
												"src": "1358:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 4,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1358:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 7,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "1388:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 63,
												"src": "1382:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 6,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1382:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 9,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "1407:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 63,
												"src": "1399:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 8,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1399:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 11,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "1426:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 63,
												"src": "1418:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 10,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1418:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1348:85:0"
									},
									"returnParameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 14,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 63,
												"src": "1457:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 13,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1457:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1456:9:0"
									},
									"scope": 100,
									"src": "1332:1556:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 98,
										"nodeType": "Block",
										"src": "3420:524:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 77,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 74,
																	"name": "signature",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 68,
																	"src": "3438:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																},
																"id": 75,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "3448:6:0",
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "3438:16:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "3635",
																"id": 76,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3458:2:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_65_by_1",
																	"typeString": "int_const 65"
																},
																"value": "65"
															},
															"src": "3438:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45435265636f7665723a20696e76616c6964207369676e6174757265206c656e677468",
															"id": 78,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3462:37:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_18924d403b6021ab06fc716b63f325735bc46236efa503f60cf9d41f7c2f2267",
																"typeString": "literal_string \"ECRecover: invalid signature length\""
															},
															"value": "ECRecover: invalid signature length"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_18924d403b6021ab06fc716b63f325735bc46236efa503f60cf9d41f7c2f2267",
																"typeString": "literal_string \"ECRecover: invalid signature length\""
															}
														],
														"id": 73,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3430:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 79,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3430:70:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 80,
												"nodeType": "ExpressionStatement",
												"src": "3430:70:0"
											},
											{
												"assignments": [
													82
												],
												"declarations": [
													{
														"constant": false,
														"id": 82,
														"mutability": "mutable",
														"name": "r",
														"nameLocation": "3519:1:0",
														"nodeType": "VariableDeclaration",
														"scope": 98,
														"src": "3511:9:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 81,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "3511:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 83,
												"nodeType": "VariableDeclarationStatement",
												"src": "3511:9:0"
											},
											{
												"assignments": [
													85
												],
												"declarations": [
													{
														"constant": false,
														"id": 85,
														"mutability": "mutable",
														"name": "s",
														"nameLocation": "3538:1:0",
														"nodeType": "VariableDeclaration",
														"scope": 98,
														"src": "3530:9:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 84,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "3530:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 86,
												"nodeType": "VariableDeclarationStatement",
												"src": "3530:9:0"
											},
											{
												"assignments": [
													88
												],
												"declarations": [
													{
														"constant": false,
														"id": 88,
														"mutability": "mutable",
														"name": "v",
														"nameLocation": "3555:1:0",
														"nodeType": "VariableDeclaration",
														"scope": 98,
														"src": "3549:7:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														},
														"typeName": {
															"id": 87,
															"name": "uint8",
															"nodeType": "ElementaryTypeName",
															"src": "3549:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 89,
												"nodeType": "VariableDeclarationStatement",
												"src": "3549:7:0"
											},
											{
												"AST": {
													"nativeSrc": "3742:155:0",
													"nodeType": "YulBlock",
													"src": "3742:155:0",
													"statements": [
														{
															"nativeSrc": "3756:32:0",
															"nodeType": "YulAssignment",
															"src": "3756:32:0",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "signature",
																				"nativeSrc": "3771:9:0",
																				"nodeType": "YulIdentifier",
																				"src": "3771:9:0"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3782:4:0",
																				"nodeType": "YulLiteral",
																				"src": "3782:4:0",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3767:3:0",
																			"nodeType": "YulIdentifier",
																			"src": "3767:3:0"
																		},
																		"nativeSrc": "3767:20:0",
																		"nodeType": "YulFunctionCall",
																		"src": "3767:20:0"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "3761:5:0",
																	"nodeType": "YulIdentifier",
																	"src": "3761:5:0"
																},
																"nativeSrc": "3761:27:0",
																"nodeType": "YulFunctionCall",
																"src": "3761:27:0"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nativeSrc": "3756:1:0",
																	"nodeType": "YulIdentifier",
																	"src": "3756:1:0"
																}
															]
														},
														{
															"nativeSrc": "3801:32:0",
															"nodeType": "YulAssignment",
															"src": "3801:32:0",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "signature",
																				"nativeSrc": "3816:9:0",
																				"nodeType": "YulIdentifier",
																				"src": "3816:9:0"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3827:4:0",
																				"nodeType": "YulLiteral",
																				"src": "3827:4:0",
																				"type": "",
																				"value": "0x40"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3812:3:0",
																			"nodeType": "YulIdentifier",
																			"src": "3812:3:0"
																		},
																		"nativeSrc": "3812:20:0",
																		"nodeType": "YulFunctionCall",
																		"src": "3812:20:0"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "3806:5:0",
																	"nodeType": "YulIdentifier",
																	"src": "3806:5:0"
																},
																"nativeSrc": "3806:27:0",
																"nodeType": "YulFunctionCall",
																"src": "3806:27:0"
															},
															"variableNames": [
																{
																	"name": "s",
																	"nativeSrc": "3801:1:0",
																	"nodeType": "YulIdentifier",
																	"src": "3801:1:0"
																}
															]
														},
														{
															"nativeSrc": "3846:41:0",
															"nodeType": "YulAssignment",
															"src": "3846:41:0",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "3856:1:0",
																		"nodeType": "YulLiteral",
																		"src": "3856:1:0",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "signature",
																						"nativeSrc": "3869:9:0",
																						"nodeType": "YulIdentifier",
																						"src": "3869:9:0"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "3880:4:0",
																						"nodeType": "YulLiteral",
																						"src": "3880:4:0",
																						"type": "",
																						"value": "0x60"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "3865:3:0",
																					"nodeType": "YulIdentifier",
																					"src": "3865:3:0"
																				},
																				"nativeSrc": "3865:20:0",
																				"nodeType": "YulFunctionCall",
																				"src": "3865:20:0"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nativeSrc": "3859:5:0",
																			"nodeType": "YulIdentifier",
																			"src": "3859:5:0"
																		},
																		"nativeSrc": "3859:27:0",
																		"nodeType": "YulFunctionCall",
																		"src": "3859:27:0"
																	}
																],
																"functionName": {
																	"name": "byte",
																	"nativeSrc": "3851:4:0",
																	"nodeType": "YulIdentifier",
																	"src": "3851:4:0"
																},
																"nativeSrc": "3851:36:0",
																"nodeType": "YulFunctionCall",
																"src": "3851:36:0"
															},
															"variableNames": [
																{
																	"name": "v",
																	"nativeSrc": "3846:1:0",
																	"nodeType": "YulIdentifier",
																	"src": "3846:1:0"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 82,
														"isOffset": false,
														"isSlot": false,
														"src": "3756:1:0",
														"valueSize": 1
													},
													{
														"declaration": 85,
														"isOffset": false,
														"isSlot": false,
														"src": "3801:1:0",
														"valueSize": 1
													},
													{
														"declaration": 68,
														"isOffset": false,
														"isSlot": false,
														"src": "3771:9:0",
														"valueSize": 1
													},
													{
														"declaration": 68,
														"isOffset": false,
														"isSlot": false,
														"src": "3816:9:0",
														"valueSize": 1
													},
													{
														"declaration": 68,
														"isOffset": false,
														"isSlot": false,
														"src": "3869:9:0",
														"valueSize": 1
													},
													{
														"declaration": 88,
														"isOffset": false,
														"isSlot": false,
														"src": "3846:1:0",
														"valueSize": 1
													}
												],
												"id": 90,
												"nodeType": "InlineAssembly",
												"src": "3733:164:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 92,
															"name": "digest",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 66,
															"src": "3921:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 93,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 88,
															"src": "3929:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 94,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 82,
															"src": "3932:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 95,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 85,
															"src": "3935:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 91,
														"name": "recover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															63,
															99
														],
														"referencedDeclaration": 63,
														"src": "3913:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address)"
														}
													},
													"id": 96,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3913:24:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 72,
												"id": 97,
												"nodeType": "Return",
												"src": "3906:31:0"
											}
										]
									},
									"documentation": {
										"id": 64,
										"nodeType": "StructuredDocumentation",
										"src": "2894:404:0",
										"text": " @notice Recover signer's address from a signed message\n @dev Adapted from: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/0053ee040a7ff1dbc39691c9e67a69f564930a88/contracts/utils/cryptography/ECDSA.sol\n @param digest    Keccak-256 hash digest of the signed message\n @param signature Signature byte array associated with hash\n @return Signer address"
									},
									"id": 99,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nameLocation": "3312:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 69,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 66,
												"mutability": "mutable",
												"name": "digest",
												"nameLocation": "3328:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 99,
												"src": "3320:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 65,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3320:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 68,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "3349:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 99,
												"src": "3336:22:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 67,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3336:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3319:40:0"
									},
									"returnParameters": {
										"id": 72,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 71,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 99,
												"src": "3407:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 70,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3407:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3406:9:0"
									},
									"scope": 100,
									"src": "3303:641:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 101,
							"src": "779:3167:0",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "660:3287:0"
				},
				"id": 0
			}
		}
	}
}