{
	"id": "0bcdcfac4e1a7dc48f1fae0ae86f3f39",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.25",
	"solcLongVersion": "0.8.25+commit.b61c2a91",
	"input": {
		"language": "Solidity",
		"sources": {
			"util/MessageHashUtils.sol": {
				"content": "/**\n * SPDX-License-Identifier: Apache-2.0\n *\n * Copyright (c) 2023, Circle Internet Financial, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\n *\n * The library provides methods for generating a hash of a message that conforms to the\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\n * specifications.\n */\nlibrary MessageHashUtils {\n    /**\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\n     * Adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/21bb89ef5bfc789b9333eb05e3ba2b7b284ac77c/contracts/utils/cryptography/MessageHashUtils.sol\n     *\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\n     * `\\x19\\x01` and hashing the result. It corresponds to the hash signed by the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\n     *\n     * @param domainSeparator    Domain separator\n     * @param structHash         Hashed EIP-712 data struct\n     * @return digest            The keccak256 digest of an EIP-712 typed data\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash)\n        internal\n        pure\n        returns (bytes32 digest)\n    {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, \"\\x19\\x01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            digest := keccak256(ptr, 0x42)\n        }\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 2000000
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": [],
			"evmVersion": "istanbul"
		}
	},
	"output": {
		"contracts": {
			"util/MessageHashUtils.sol": {
				"MessageHashUtils": {
					"abi": [],
					"devdoc": {
						"details": "Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing. The library provides methods for generating a hash of a message that conforms to the https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712] specifications.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"util/MessageHashUtils.sol\":1016:2203  library MessageHashUtils {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"util/MessageHashUtils.sol\":1016:2203  library MessageHashUtils {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220435532fc078b17f02ddc394a2e4bd546488988e94c164f129850524b094b195e64736f6c63430008190033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220435532fc078b17f02ddc394a2e4bd546488988e94c164f129850524b094b195e64736f6c63430008190033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 NUMBER SSTORE ORIGIN 0xFC SMOD DUP12 OR CREATE 0x2D 0xDC CODECOPY BLOBBASEFEE 0x2E 0x4B 0xD5 CHAINID BASEFEE DUP10 DUP9 0xE9 0x4C AND 0x4F SLT SWAP9 POP MSTORE 0x4B MULMOD 0x4B NOT MCOPY PUSH5 0x736F6C6343 STOP ADDMOD NOT STOP CALLER ",
							"sourceMap": "1016:1187:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1016:1187:0;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220435532fc078b17f02ddc394a2e4bd546488988e94c164f129850524b094b195e64736f6c63430008190033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 NUMBER SSTORE ORIGIN 0xFC SMOD DUP12 OR CREATE 0x2D 0xDC CODECOPY BLOBBASEFEE 0x2E 0x4B 0xD5 CHAINID BASEFEE DUP10 DUP9 0xE9 0x4C AND 0x4F SLT SWAP9 POP MSTORE 0x4B MULMOD 0x4B NOT MCOPY PUSH5 0x736F6C6343 STOP ADDMOD NOT STOP CALLER ",
							"sourceMap": "1016:1187:0:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"toTypedDataHash(bytes32,bytes32)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1016,
									"end": 2203,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1016,
									"end": 2203,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1016,
									"end": 2203,
									"name": "PUSH",
									"source": 0,
									"value": "B"
								},
								{
									"begin": 1016,
									"end": 2203,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 1016,
									"end": 2203,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 1016,
									"end": 2203,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 1016,
									"end": 2203,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 1016,
									"end": 2203,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 1016,
									"end": 2203,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 1016,
									"end": 2203,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1016,
									"end": 2203,
									"name": "BYTE",
									"source": 0
								},
								{
									"begin": 1016,
									"end": 2203,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 1016,
									"end": 2203,
									"name": "EQ",
									"source": 0
								},
								{
									"begin": 1016,
									"end": 2203,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 1016,
									"end": 2203,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1016,
									"end": 2203,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1016,
									"end": 2203,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 1016,
									"end": 2203,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1016,
									"end": 2203,
									"name": "PUSH",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 1016,
									"end": 2203,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 1016,
									"end": 2203,
									"name": "PUSH",
									"source": 0,
									"value": "24"
								},
								{
									"begin": 1016,
									"end": 2203,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1016,
									"end": 2203,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 1016,
									"end": 2203,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 1016,
									"end": 2203,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1016,
									"end": 2203,
									"name": "ADDRESS",
									"source": 0
								},
								{
									"begin": 1016,
									"end": 2203,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1016,
									"end": 2203,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 1016,
									"end": 2203,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 1016,
									"end": 2203,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1016,
									"end": 2203,
									"name": "MSTORE8",
									"source": 0
								},
								{
									"begin": 1016,
									"end": 2203,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 1016,
									"end": 2203,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1016,
									"end": 2203,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220435532fc078b17f02ddc394a2e4bd546488988e94c164f129850524b094b195e64736f6c63430008190033",
									".code": [
										{
											"begin": 1016,
											"end": 2203,
											"name": "PUSHDEPLOYADDRESS",
											"source": 0
										},
										{
											"begin": 1016,
											"end": 2203,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 1016,
											"end": 2203,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1016,
											"end": 2203,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 1016,
											"end": 2203,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1016,
											"end": 2203,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1016,
											"end": 2203,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1016,
											"end": 2203,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1016,
											"end": 2203,
											"name": "REVERT",
											"source": 0
										}
									]
								}
							},
							"sourceList": [
								"util/MessageHashUtils.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing. The library provides methods for generating a hash of a message that conforms to the https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712] specifications.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"util/MessageHashUtils.sol\":\"MessageHashUtils\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":2000000},\"remappings\":[]},\"sources\":{\"util/MessageHashUtils.sol\":{\"keccak256\":\"0x37da2dca1377a6858128b480ddceab01425a98243c247ca49ee3dfecdd12ef9e\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://98a6043483225da5a774c23091d650ce94a175cc85c931f3403276c85be670cd\",\"dweb:/ipfs/Qmf4trmyZR6y9444a4sL4kRvtWMx72XU5WMUfijJuCMwQd\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"util/MessageHashUtils.sol": {
				"ast": {
					"absolutePath": "util/MessageHashUtils.sol",
					"exportedSymbols": {
						"MessageHashUtils": [
							15
						]
					},
					"id": 16,
					"license": "Apache-2.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "660:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "MessageHashUtils",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "685:330:0",
								"text": " @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\n The library provides methods for generating a hash of a message that conforms to the\n https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\n specifications."
							},
							"fullyImplemented": true,
							"id": 15,
							"linearizedBaseContracts": [
								15
							],
							"name": "MessageHashUtils",
							"nameLocation": "1024:16:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 13,
										"nodeType": "Block",
										"src": "1952:249:0",
										"statements": [
											{
												"AST": {
													"nativeSrc": "1971:224:0",
													"nodeType": "YulBlock",
													"src": "1971:224:0",
													"statements": [
														{
															"nativeSrc": "1985:22:0",
															"nodeType": "YulVariableDeclaration",
															"src": "1985:22:0",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "2002:4:0",
																		"nodeType": "YulLiteral",
																		"src": "2002:4:0",
																		"type": "",
																		"value": "0x40"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "1996:5:0",
																	"nodeType": "YulIdentifier",
																	"src": "1996:5:0"
																},
																"nativeSrc": "1996:11:0",
																"nodeType": "YulFunctionCall",
																"src": "1996:11:0"
															},
															"variables": [
																{
																	"name": "ptr",
																	"nativeSrc": "1989:3:0",
																	"nodeType": "YulTypedName",
																	"src": "1989:3:0",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "ptr",
																		"nativeSrc": "2027:3:0",
																		"nodeType": "YulIdentifier",
																		"src": "2027:3:0"
																	},
																	{
																		"hexValue": "1901",
																		"kind": "string",
																		"nativeSrc": "2032:10:0",
																		"nodeType": "YulLiteral",
																		"src": "2032:10:0",
																		"type": "",
																		"value": "\u0019\u0001"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2020:6:0",
																	"nodeType": "YulIdentifier",
																	"src": "2020:6:0"
																},
																"nativeSrc": "2020:23:0",
																"nodeType": "YulFunctionCall",
																"src": "2020:23:0"
															},
															"nativeSrc": "2020:23:0",
															"nodeType": "YulExpressionStatement",
															"src": "2020:23:0"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "ptr",
																				"nativeSrc": "2067:3:0",
																				"nodeType": "YulIdentifier",
																				"src": "2067:3:0"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "2072:4:0",
																				"nodeType": "YulLiteral",
																				"src": "2072:4:0",
																				"type": "",
																				"value": "0x02"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "2063:3:0",
																			"nodeType": "YulIdentifier",
																			"src": "2063:3:0"
																		},
																		"nativeSrc": "2063:14:0",
																		"nodeType": "YulFunctionCall",
																		"src": "2063:14:0"
																	},
																	{
																		"name": "domainSeparator",
																		"nativeSrc": "2079:15:0",
																		"nodeType": "YulIdentifier",
																		"src": "2079:15:0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2056:6:0",
																	"nodeType": "YulIdentifier",
																	"src": "2056:6:0"
																},
																"nativeSrc": "2056:39:0",
																"nodeType": "YulFunctionCall",
																"src": "2056:39:0"
															},
															"nativeSrc": "2056:39:0",
															"nodeType": "YulExpressionStatement",
															"src": "2056:39:0"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "ptr",
																				"nativeSrc": "2119:3:0",
																				"nodeType": "YulIdentifier",
																				"src": "2119:3:0"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "2124:4:0",
																				"nodeType": "YulLiteral",
																				"src": "2124:4:0",
																				"type": "",
																				"value": "0x22"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "2115:3:0",
																			"nodeType": "YulIdentifier",
																			"src": "2115:3:0"
																		},
																		"nativeSrc": "2115:14:0",
																		"nodeType": "YulFunctionCall",
																		"src": "2115:14:0"
																	},
																	{
																		"name": "structHash",
																		"nativeSrc": "2131:10:0",
																		"nodeType": "YulIdentifier",
																		"src": "2131:10:0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2108:6:0",
																	"nodeType": "YulIdentifier",
																	"src": "2108:6:0"
																},
																"nativeSrc": "2108:34:0",
																"nodeType": "YulFunctionCall",
																"src": "2108:34:0"
															},
															"nativeSrc": "2108:34:0",
															"nodeType": "YulExpressionStatement",
															"src": "2108:34:0"
														},
														{
															"nativeSrc": "2155:30:0",
															"nodeType": "YulAssignment",
															"src": "2155:30:0",
															"value": {
																"arguments": [
																	{
																		"name": "ptr",
																		"nativeSrc": "2175:3:0",
																		"nodeType": "YulIdentifier",
																		"src": "2175:3:0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2180:4:0",
																		"nodeType": "YulLiteral",
																		"src": "2180:4:0",
																		"type": "",
																		"value": "0x42"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nativeSrc": "2165:9:0",
																	"nodeType": "YulIdentifier",
																	"src": "2165:9:0"
																},
																"nativeSrc": "2165:20:0",
																"nodeType": "YulFunctionCall",
																"src": "2165:20:0"
															},
															"variableNames": [
																{
																	"name": "digest",
																	"nativeSrc": "2155:6:0",
																	"nodeType": "YulIdentifier",
																	"src": "2155:6:0"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 10,
														"isOffset": false,
														"isSlot": false,
														"src": "2155:6:0",
														"valueSize": 1
													},
													{
														"declaration": 5,
														"isOffset": false,
														"isSlot": false,
														"src": "2079:15:0",
														"valueSize": 1
													},
													{
														"declaration": 7,
														"isOffset": false,
														"isSlot": false,
														"src": "2131:10:0",
														"valueSize": 1
													}
												],
												"id": 12,
												"nodeType": "InlineAssembly",
												"src": "1962:233:0"
											}
										]
									},
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "1047:763:0",
										"text": " @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\n Adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/21bb89ef5bfc789b9333eb05e3ba2b7b284ac77c/contracts/utils/cryptography/MessageHashUtils.sol\n The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\n `\\x19\\x01` and hashing the result. It corresponds to the hash signed by the\n https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\n @param domainSeparator    Domain separator\n @param structHash         Hashed EIP-712 data struct\n @return digest            The keccak256 digest of an EIP-712 typed data"
									},
									"id": 14,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toTypedDataHash",
									"nameLocation": "1824:15:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 8,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5,
												"mutability": "mutable",
												"name": "domainSeparator",
												"nameLocation": "1848:15:0",
												"nodeType": "VariableDeclaration",
												"scope": 14,
												"src": "1840:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 4,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1840:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 7,
												"mutability": "mutable",
												"name": "structHash",
												"nameLocation": "1873:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 14,
												"src": "1865:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 6,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1865:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1839:45:0"
									},
									"returnParameters": {
										"id": 11,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 10,
												"mutability": "mutable",
												"name": "digest",
												"nameLocation": "1940:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 14,
												"src": "1932:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 9,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1932:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1931:16:0"
									},
									"scope": 15,
									"src": "1815:386:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 16,
							"src": "1016:1187:0",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "660:1544:0"
				},
				"id": 0
			}
		}
	}
}